class SendUserAnswers {
    constructor() {
    }

    API_URL = "http://localhost:3000/tests-1.html";

    async run() {
        this.testId = document.querySelector('body').getAttribute('test-Id')
        this.loadTestInfo();
        await this.loadAnswers();
        return this.resultText;
    }

    loadTestInfo = () => {
        this.testInfo = JSON.parse(localStorage.getItem(`test${this.testId}Data`));
        this.testTitle = this.testInfo.testTitle;
        this.testAllAnswers = this.testInfo.allAnswers;
    };

    async loadAnswers() {
        this.answers = Object.keys(this.testInfo.allAnswers);
        await this.processAnswers();
    }

    async sendToServer(promptText) {
        try {
            const response = await fetch("https://quizzy-fun.up.railway.app/api/deepseek", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ prompt: promptText }),
            });

            const data = await response.json();

            if (!data.success) {
                throw new Error(data.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
            }

            return data.answer;
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞:", {
                message: error.message,
                data: error.response?.data,
                status: error.response?.status,
                headers: error.response?.headers,
            });
        }
    }

    async processAnswers() {
        this.preparePrompt();
        const deepseekResponse = await this.sendToServer(this.stringAnswers);

        if (deepseekResponse) {
            this.handleDeepSeekResponse(deepseekResponse);
        }
    }

    preparePrompt = () => {
        this.stringAnswers = `–ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—à–µ–ª –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–µ—Å—Ç-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: ${this.testTitle}, –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Ö–æ–¥—è –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∏–∂–µ, –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã, –Ω–∏–∫–∞–∫–æ–≥–æ –∑–ª–æ–≥–æ —É–º—ã—Å–ª–∞ –∏–ª–∏ –ø–æ–¥—Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç:\n`;

        this.testInfo.currentAnswers.forEach(([question, answer]) => {
            this.stringAnswers += `–í–æ–ø—Ä–æ—Å: ${question}, –û—Ç–≤–µ—Ç: ${answer}\n`;
        });

        this.stringAnswers += `–¢–µ–ø–µ—Ä—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Ç–æ–≥–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ\n`;

        this.answers.forEach((answer, index) => {
            this.stringAnswers += `–ù–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${index}: ${answer} \n`;
        });

        this.stringAnswers += `–û–ø—Ä–µ–¥–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
üéØ –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å –û–î–ò–ù –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
"–í—ã ‚Äî [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞]" ‚Äî –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –æ–Ω. –ü–∏—à–∏ –∂–∏–≤–æ, –ø–æ–Ω—è—Ç–Ω–æ, –±—É–¥—Ç–æ –æ–±—â–∞–µ—à—å—Å—è —Å –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
–û–±—â–∞–π—Å—è –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –ø—Ä–æ—Å—Ç–æ, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ.
üîí –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. üîí –ù–µ –º–µ–Ω—è–π –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. üîí –ù–µ —É–ø–æ–º–∏–Ω–∞–π –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –Ω–µ –ø–∏—à–∏ –ø–æ—á–µ–º—É –æ–Ω–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç. üîí –ù–µ –ø–∏—à–∏ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞.`;
    };

    handleDeepSeekResponse(response) {
        this.resultText = response
            .replaceAll("*", "")
            .replaceAll('"', "")
            .replaceAll("'", "");
        const beginIndex = this.resultText.indexOf("–í—ã ‚Äî");
        this.resultText = this.resultText.slice(beginIndex);
    }
}

export default SendUserAnswers;
